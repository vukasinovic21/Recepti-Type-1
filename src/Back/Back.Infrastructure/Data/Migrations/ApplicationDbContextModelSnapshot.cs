// <auto-generated />
using System;
using Back.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Back.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Back.Domain.Models.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Carbs")
                        .HasMaxLength(256)
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("Fat")
                        .HasMaxLength(256)
                        .HasColumnType("numeric");

                    b.Property<decimal>("GI")
                        .HasMaxLength(256)
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<decimal>("Protein")
                        .HasMaxLength(256)
                        .HasColumnType("numeric");

                    b.Property<decimal>("Sugar")
                        .HasMaxLength(256)
                        .HasColumnType("numeric");

                    b.Property<decimal>("kCal")
                        .HasMaxLength(256)
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("Back.Domain.Models.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfLike")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Back.Domain.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("QuestionName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionName")
                        .IsUnique();

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Back.Domain.Models.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Boolean>("Shared")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<string>("RecipeName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("TimeToPrepare")
                        .HasColumnType("integer");

                    b.Property<Guid>("TypeOfFoodId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TypeOfFoodId");

                    b.HasIndex("UserId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Back.Domain.Models.RecipeItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeItems");
                });

            modelBuilder.Entity("Back.Domain.Models.TypeOfFood", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("TypeName")
                        .IsUnique();

                    b.ToTable("TypesOfFood");
                });
            //Diet
            modelBuilder.Entity("Back.Domain.Models.Diet", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid");

                b.Property<DateTime?>("CreatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("CreatedBy")
                    .HasColumnType("text");

                b.Property<DateTime?>("LastModifiedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("LastModifiedBy")
                    .HasColumnType("text");

                b.Property<string>("DietName")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid");

                b.Property<Guid>("NutritionId")
                    .HasColumnType("uuid");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("Diets");
            });
            //PlanOfDiet
            modelBuilder.Entity("Back.Domain.Models.PlanOfDiet", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid");

                b.Property<DateTime?>("CreatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("CreatedBy")
                    .HasColumnType("text");

                b.Property<Guid>("DietId")
                    .HasColumnType("uuid");

                b.Property<DateTime?>("LastModifiedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("LastModifiedBy")
                    .HasColumnType("text");

                b.Property<string>("DayOfWeek")
                    .HasColumnType("numeric");

                b.Property<Guid>("RecipeId")
                    .HasColumnType("uuid");

               /* b.Property<Guid>("TypeOfMealId")
                        .HasColumnType("uuid");*/

                b.HasKey("Id");

                b.HasIndex("DietId");

                b.HasIndex("RecipeId");

                //b.HasIndex("TypeOfMealId");

                b.ToTable("PlanOfDiets");
            });
            //TypeOfMeal
            modelBuilder.Entity("Back.Domain.Models.TypeOfMeal", b =>
            {
                b.Property<Guid>("Id")
                    .HasColumnType("uuid");

                b.Property<DateTime?>("CreatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("CreatedBy")
                    .HasColumnType("text");

                b.Property<DateTime?>("LastModifiedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("LastModifiedBy")
                    .HasColumnType("text");

                b.Property<string>("TypeName")
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnType("character varying(256)");

                b.HasKey("Id");

                b.HasIndex("TypeName")
                    .IsUnique();

                b.ToTable("TypesOfMeal");
            });

            modelBuilder.Entity("Back.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ForgotPasswordAnswerHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("USER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Back.Domain.Models.Like", b =>
                {
                    b.HasOne("Back.Domain.Models.Recipe", null)
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Back.Domain.Models.Recipe", b =>
                {
                    b.HasOne("Back.Domain.Models.TypeOfFood", null)
                        .WithMany()
                        .HasForeignKey("TypeOfFoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Back.Domain.Models.RecipeItem", b =>
                {
                    b.HasOne("Back.Domain.Models.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Back.Domain.Models.Recipe", null)
                        .WithMany("RecipeItems")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Back.Domain.Models.Recipe", b =>
                {
                    b.Navigation("RecipeItems");
                });
            
            modelBuilder.Entity("Back.Domain.Models.Diet", b =>
            {
                b.HasOne("Back.Domain.Models.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });
            
            modelBuilder.Entity("Back.Domain.Models.PlanOfDiet", b =>
            {
                b.HasOne("Back.Domain.Models.Diet", null)
                    .WithMany("PlanOfDiets")
                    .HasForeignKey("DietId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Back.Domain.Models.Recipe", null)
                    .WithMany()
                    .HasForeignKey("RecipeId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            
                b.HasOne("Back.Domain.Models.TypeOfMeal", null)
                    .WithMany()
                    .HasForeignKey("TypeOfMealId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            modelBuilder.Entity("Back.Domain.Models.Diet", b =>
            {
                b.Navigation("PlanOfDiets");
            });

#pragma warning restore 612, 618
        }
    }
}
